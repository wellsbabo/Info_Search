function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.map.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.symbol.async-iterator.js";
import "core-js/modules/es.symbol.to-string-tag.js";
import "core-js/modules/es.json.to-string-tag.js";
import "core-js/modules/es.math.to-string-tag.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.array.reverse.js";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { simpleCellAddress } from '../../Cell';
/**
 * Mapping from cell addresses to vertices
 *
 * Uses Map to store addresses, having minimal memory usage for sparse sheets but not necessarily constant set/lookup.
 */

export var SparseStrategy = /*#__PURE__*/function () {
  function SparseStrategy(width, height) {
    _classCallCheck(this, SparseStrategy);

    this.width = width;
    this.height = height;
    /**
     * Map of Maps in which actual data is stored.
     *
     * Key of map in first level is column number.
     * Key of map in second level is row number.
     */

    this.mapping = new Map();
  }
  /** @inheritDoc */


  _createClass(SparseStrategy, [{
    key: "getCell",
    value: function getCell(address) {
      var _a;

      return (_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.get(address.row);
    }
    /** @inheritDoc */

  }, {
    key: "setCell",
    value: function setCell(address, newVertex) {
      this.width = Math.max(this.width, address.col + 1);
      this.height = Math.max(this.height, address.row + 1);
      var colMapping = this.mapping.get(address.col);

      if (!colMapping) {
        colMapping = new Map();
        this.mapping.set(address.col, colMapping);
      }

      colMapping.set(address.row, newVertex);
    }
    /** @inheritDoc */

  }, {
    key: "has",
    value: function has(address) {
      var _a;

      return !!((_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.get(address.row));
    }
    /** @inheritDoc */

  }, {
    key: "getHeight",
    value: function getHeight() {
      return this.height;
    }
    /** @inheritDoc */

  }, {
    key: "getWidth",
    value: function getWidth() {
      return this.width;
    }
  }, {
    key: "removeCell",
    value: function removeCell(address) {
      var _a;

      (_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.delete(address.row);
    }
  }, {
    key: "addRows",
    value: function addRows(row, numberOfRows) {
      this.mapping.forEach(function (rowMapping) {
        var tmpMapping = new Map();
        rowMapping.forEach(function (vertex, rowNumber) {
          if (rowNumber >= row) {
            tmpMapping.set(rowNumber + numberOfRows, vertex);
            rowMapping.delete(rowNumber);
          }
        });
        tmpMapping.forEach(function (vertex, rowNumber) {
          rowMapping.set(rowNumber, vertex);
        });
      });
      this.height += numberOfRows;
    }
  }, {
    key: "addColumns",
    value: function addColumns(column, numberOfColumns) {
      var _this = this;

      var tmpMapping = new Map();
      this.mapping.forEach(function (rowMapping, colNumber) {
        if (colNumber >= column) {
          tmpMapping.set(colNumber + numberOfColumns, rowMapping);

          _this.mapping.delete(colNumber);
        }
      });
      tmpMapping.forEach(function (rowMapping, colNumber) {
        _this.mapping.set(colNumber, rowMapping);
      });
      this.width += numberOfColumns;
    }
  }, {
    key: "removeRows",
    value: function removeRows(removedRows) {
      this.mapping.forEach(function (rowMapping) {
        var tmpMapping = new Map();
        rowMapping.forEach(function (vertex, rowNumber) {
          if (rowNumber >= removedRows.rowStart) {
            rowMapping.delete(rowNumber);

            if (rowNumber > removedRows.rowEnd) {
              tmpMapping.set(rowNumber - removedRows.numberOfRows, vertex);
            }
          }
        });
        tmpMapping.forEach(function (vertex, rowNumber) {
          rowMapping.set(rowNumber, vertex);
        });
      });
      var rightmostRowRemoved = Math.min(this.height - 1, removedRows.rowEnd);
      var numberOfRowsRemoved = Math.max(0, rightmostRowRemoved - removedRows.rowStart + 1);
      this.height = Math.max(0, this.height - numberOfRowsRemoved);
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(removedColumns) {
      var _this2 = this;

      var tmpMapping = new Map();
      this.mapping.forEach(function (rowMapping, colNumber) {
        if (colNumber >= removedColumns.columnStart) {
          _this2.mapping.delete(colNumber);

          if (colNumber > removedColumns.columnEnd) {
            tmpMapping.set(colNumber - removedColumns.numberOfColumns, rowMapping);
          }
        }
      });
      tmpMapping.forEach(function (rowMapping, colNumber) {
        _this2.mapping.set(colNumber, rowMapping);
      });
      var rightmostColumnRemoved = Math.min(this.width - 1, removedColumns.columnEnd);
      var numberOfColumnsRemoved = Math.max(0, rightmostColumnRemoved - removedColumns.columnStart + 1);
      this.width = Math.max(0, this.width - numberOfColumnsRemoved);
    }
  }, {
    key: "getEntries",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function getEntries(sheet) {
      var _iterator, _step, _step$value, colNumber, col, _iterator2, _step2, _step2$value, rowNumber, value;

      return _regeneratorRuntime().wrap(function getEntries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.mapping);
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), colNumber = _step$value[0], col = _step$value[1];
              _iterator2 = _createForOfIteratorHelper(col);
              _context.prev = 6;

              _iterator2.s();

            case 8:
              if ((_step2 = _iterator2.n()).done) {
                _context.next = 14;
                break;
              }

              _step2$value = _slicedToArray(_step2.value, 2), rowNumber = _step2$value[0], value = _step2$value[1];
              _context.next = 12;
              return [simpleCellAddress(sheet, colNumber, rowNumber), value];

            case 12:
              _context.next = 8;
              break;

            case 14:
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](6);

              _iterator2.e(_context.t0);

            case 19:
              _context.prev = 19;

              _iterator2.f();

              return _context.finish(19);

            case 22:
              _context.next = 3;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](1);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, getEntries, this, [[1, 26, 29, 32], [6, 16, 19, 22]]);
    })
  }, {
    key: "verticesFromColumn",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function verticesFromColumn(column) {
      var colMapping, _iterator3, _step3, _step3$value, _, vertex;

      return _regeneratorRuntime().wrap(function verticesFromColumn$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              colMapping = this.mapping.get(column);

              if (!(colMapping === undefined)) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return");

            case 3:
              _iterator3 = _createForOfIteratorHelper(colMapping);
              _context2.prev = 4;

              _iterator3.s();

            case 6:
              if ((_step3 = _iterator3.n()).done) {
                _context2.next = 12;
                break;
              }

              _step3$value = _slicedToArray(_step3.value, 2), _ = _step3$value[0], vertex = _step3$value[1];
              _context2.next = 10;
              return vertex;

            case 10:
              _context2.next = 6;
              break;

            case 12:
              _context2.next = 17;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](4);

              _iterator3.e(_context2.t0);

            case 17:
              _context2.prev = 17;

              _iterator3.f();

              return _context2.finish(17);

            case 20:
            case "end":
              return _context2.stop();
          }
        }
      }, verticesFromColumn, this, [[4, 14, 17, 20]]);
    })
  }, {
    key: "verticesFromRow",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function verticesFromRow(row) {
      var _iterator4, _step4, colMapping, rowVertex;

      return _regeneratorRuntime().wrap(function verticesFromRow$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iterator4 = _createForOfIteratorHelper(this.mapping.values());
              _context3.prev = 1;

              _iterator4.s();

            case 3:
              if ((_step4 = _iterator4.n()).done) {
                _context3.next = 11;
                break;
              }

              colMapping = _step4.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context3.next = 9;
                break;
              }

              _context3.next = 9;
              return rowVertex;

            case 9:
              _context3.next = 3;
              break;

            case 11:
              _context3.next = 16;
              break;

            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](1);

              _iterator4.e(_context3.t0);

            case 16:
              _context3.prev = 16;

              _iterator4.f();

              return _context3.finish(16);

            case 19:
            case "end":
              return _context3.stop();
          }
        }
      }, verticesFromRow, this, [[1, 13, 16, 19]]);
    })
  }, {
    key: "verticesFromColumnsSpan",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function verticesFromColumnsSpan(columnsSpan) {
      var _iterator5, _step5, column, colMapping, _iterator6, _step6, _step6$value, _, vertex;

      return _regeneratorRuntime().wrap(function verticesFromColumnsSpan$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iterator5 = _createForOfIteratorHelper(columnsSpan.columns());
              _context4.prev = 1;

              _iterator5.s();

            case 3:
              if ((_step5 = _iterator5.n()).done) {
                _context4.next = 27;
                break;
              }

              column = _step5.value;
              colMapping = this.mapping.get(column);

              if (!(colMapping === undefined)) {
                _context4.next = 8;
                break;
              }

              return _context4.abrupt("continue", 25);

            case 8:
              _iterator6 = _createForOfIteratorHelper(colMapping);
              _context4.prev = 9;

              _iterator6.s();

            case 11:
              if ((_step6 = _iterator6.n()).done) {
                _context4.next = 17;
                break;
              }

              _step6$value = _slicedToArray(_step6.value, 2), _ = _step6$value[0], vertex = _step6$value[1];
              _context4.next = 15;
              return vertex;

            case 15:
              _context4.next = 11;
              break;

            case 17:
              _context4.next = 22;
              break;

            case 19:
              _context4.prev = 19;
              _context4.t0 = _context4["catch"](9);

              _iterator6.e(_context4.t0);

            case 22:
              _context4.prev = 22;

              _iterator6.f();

              return _context4.finish(22);

            case 25:
              _context4.next = 3;
              break;

            case 27:
              _context4.next = 32;
              break;

            case 29:
              _context4.prev = 29;
              _context4.t1 = _context4["catch"](1);

              _iterator5.e(_context4.t1);

            case 32:
              _context4.prev = 32;

              _iterator5.f();

              return _context4.finish(32);

            case 35:
            case "end":
              return _context4.stop();
          }
        }
      }, verticesFromColumnsSpan, this, [[1, 29, 32, 35], [9, 19, 22, 25]]);
    })
  }, {
    key: "verticesFromRowsSpan",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function verticesFromRowsSpan(rowsSpan) {
      var _iterator7, _step7, colMapping, _iterator8, _step8, row, rowVertex;

      return _regeneratorRuntime().wrap(function verticesFromRowsSpan$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _iterator7 = _createForOfIteratorHelper(this.mapping.values());
              _context5.prev = 1;

              _iterator7.s();

            case 3:
              if ((_step7 = _iterator7.n()).done) {
                _context5.next = 26;
                break;
              }

              colMapping = _step7.value;
              _iterator8 = _createForOfIteratorHelper(rowsSpan.rows());
              _context5.prev = 6;

              _iterator8.s();

            case 8:
              if ((_step8 = _iterator8.n()).done) {
                _context5.next = 16;
                break;
              }

              row = _step8.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context5.next = 14;
                break;
              }

              _context5.next = 14;
              return rowVertex;

            case 14:
              _context5.next = 8;
              break;

            case 16:
              _context5.next = 21;
              break;

            case 18:
              _context5.prev = 18;
              _context5.t0 = _context5["catch"](6);

              _iterator8.e(_context5.t0);

            case 21:
              _context5.prev = 21;

              _iterator8.f();

              return _context5.finish(21);

            case 24:
              _context5.next = 3;
              break;

            case 26:
              _context5.next = 31;
              break;

            case 28:
              _context5.prev = 28;
              _context5.t1 = _context5["catch"](1);

              _iterator7.e(_context5.t1);

            case 31:
              _context5.prev = 31;

              _iterator7.f();

              return _context5.finish(31);

            case 34:
            case "end":
              return _context5.stop();
          }
        }
      }, verticesFromRowsSpan, this, [[1, 28, 31, 34], [6, 18, 21, 24]]);
    })
  }, {
    key: "entriesFromRowsSpan",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesFromRowsSpan(rowsSpan) {
      var _iterator9, _step9, _step9$value, col, colMapping, _iterator10, _step10, row, rowVertex;

      return _regeneratorRuntime().wrap(function entriesFromRowsSpan$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _iterator9 = _createForOfIteratorHelper(this.mapping.entries());
              _context6.prev = 1;

              _iterator9.s();

            case 3:
              if ((_step9 = _iterator9.n()).done) {
                _context6.next = 26;
                break;
              }

              _step9$value = _slicedToArray(_step9.value, 2), col = _step9$value[0], colMapping = _step9$value[1];
              _iterator10 = _createForOfIteratorHelper(rowsSpan.rows());
              _context6.prev = 6;

              _iterator10.s();

            case 8:
              if ((_step10 = _iterator10.n()).done) {
                _context6.next = 16;
                break;
              }

              row = _step10.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context6.next = 14;
                break;
              }

              _context6.next = 14;
              return [simpleCellAddress(rowsSpan.sheet, col, row), rowVertex];

            case 14:
              _context6.next = 8;
              break;

            case 16:
              _context6.next = 21;
              break;

            case 18:
              _context6.prev = 18;
              _context6.t0 = _context6["catch"](6);

              _iterator10.e(_context6.t0);

            case 21:
              _context6.prev = 21;

              _iterator10.f();

              return _context6.finish(21);

            case 24:
              _context6.next = 3;
              break;

            case 26:
              _context6.next = 31;
              break;

            case 28:
              _context6.prev = 28;
              _context6.t1 = _context6["catch"](1);

              _iterator9.e(_context6.t1);

            case 31:
              _context6.prev = 31;

              _iterator9.f();

              return _context6.finish(31);

            case 34:
            case "end":
              return _context6.stop();
          }
        }
      }, entriesFromRowsSpan, this, [[1, 28, 31, 34], [6, 18, 21, 24]]);
    })
  }, {
    key: "entriesFromColumnsSpan",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesFromColumnsSpan(columnsSpan) {
      var _iterator11, _step11, col, colMapping, _iterator12, _step12, _step12$value, row, vertex;

      return _regeneratorRuntime().wrap(function entriesFromColumnsSpan$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _iterator11 = _createForOfIteratorHelper(columnsSpan.columns());
              _context7.prev = 1;

              _iterator11.s();

            case 3:
              if ((_step11 = _iterator11.n()).done) {
                _context7.next = 26;
                break;
              }

              col = _step11.value;
              colMapping = this.mapping.get(col);

              if (!(colMapping !== undefined)) {
                _context7.next = 24;
                break;
              }

              _iterator12 = _createForOfIteratorHelper(colMapping.entries());
              _context7.prev = 8;

              _iterator12.s();

            case 10:
              if ((_step12 = _iterator12.n()).done) {
                _context7.next = 16;
                break;
              }

              _step12$value = _slicedToArray(_step12.value, 2), row = _step12$value[0], vertex = _step12$value[1];
              _context7.next = 14;
              return [simpleCellAddress(columnsSpan.sheet, col, row), vertex];

            case 14:
              _context7.next = 10;
              break;

            case 16:
              _context7.next = 21;
              break;

            case 18:
              _context7.prev = 18;
              _context7.t0 = _context7["catch"](8);

              _iterator12.e(_context7.t0);

            case 21:
              _context7.prev = 21;

              _iterator12.f();

              return _context7.finish(21);

            case 24:
              _context7.next = 3;
              break;

            case 26:
              _context7.next = 31;
              break;

            case 28:
              _context7.prev = 28;
              _context7.t1 = _context7["catch"](1);

              _iterator11.e(_context7.t1);

            case 31:
              _context7.prev = 31;

              _iterator11.f();

              return _context7.finish(31);

            case 34:
            case "end":
              return _context7.stop();
          }
        }
      }, entriesFromColumnsSpan, this, [[1, 28, 31, 34], [8, 18, 21, 24]]);
    })
  }, {
    key: "vertices",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function vertices() {
      var _iterator13, _step13, _step13$value, _, col, _iterator14, _step14, _step14$value, _2, value;

      return _regeneratorRuntime().wrap(function vertices$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _iterator13 = _createForOfIteratorHelper(this.mapping);
              _context8.prev = 1;

              _iterator13.s();

            case 3:
              if ((_step13 = _iterator13.n()).done) {
                _context8.next = 25;
                break;
              }

              _step13$value = _slicedToArray(_step13.value, 2), _ = _step13$value[0], col = _step13$value[1];
              _iterator14 = _createForOfIteratorHelper(col);
              _context8.prev = 6;

              _iterator14.s();

            case 8:
              if ((_step14 = _iterator14.n()).done) {
                _context8.next = 15;
                break;
              }

              _step14$value = _slicedToArray(_step14.value, 2), _2 = _step14$value[0], value = _step14$value[1];

              if (!(value !== undefined)) {
                _context8.next = 13;
                break;
              }

              _context8.next = 13;
              return value;

            case 13:
              _context8.next = 8;
              break;

            case 15:
              _context8.next = 20;
              break;

            case 17:
              _context8.prev = 17;
              _context8.t0 = _context8["catch"](6);

              _iterator14.e(_context8.t0);

            case 20:
              _context8.prev = 20;

              _iterator14.f();

              return _context8.finish(20);

            case 23:
              _context8.next = 3;
              break;

            case 25:
              _context8.next = 30;
              break;

            case 27:
              _context8.prev = 27;
              _context8.t1 = _context8["catch"](1);

              _iterator13.e(_context8.t1);

            case 30:
              _context8.prev = 30;

              _iterator13.f();

              return _context8.finish(30);

            case 33:
            case "end":
              return _context8.stop();
          }
        }
      }, vertices, this, [[1, 27, 30, 33], [6, 17, 20, 23]]);
    })
  }]);

  return SparseStrategy;
}();